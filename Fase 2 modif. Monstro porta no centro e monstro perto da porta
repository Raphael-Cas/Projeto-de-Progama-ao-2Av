#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>
#include <string.h>
#include <locale.h>
#include <time.h>

#define TAM 30 // Agora TAM é 30 para a Fase 2
#define MAX_FALAS 7
#define TAM_FALA 200

// --- Estrutura do Estado do Jogo ---
typedef struct {
    char mapa[TAM][TAM]; // Mapa 30x30
    int playerX, playerY;
    int enemyX, enemyY; // Usado para o Monstro na Fase 2
    char enemyOccupiedTile; // Guarda o caractere do tile que o monstro estava ocupando
    int hasKey;
    int lives;
    int currentMapType; // 2: Fase 2
    int dialogActive; // Não usado na Fase 2
    int currentDialogueIndex; // Não usado na Fase 2
    char npcDialogues[MAX_FALAS][TAM_FALA]; // Não usado na Fase 2
} GameState;

// --- Funções de Utilitário Comuns ---
// Note que 'moverCursor' continua funcionando bem, já que as coordenadas x e y
// ainda se referem à posição lógica no mapa.
void moverCursor(int x, int y) {
    COORD pos = { x * 2, y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

// 'desenharMapa' agora itera até TAM 30
void desenharMapa(const GameState* state) {
    system("cls");
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            printf("%c ", state->mapa[i][j]);
        }
        printf("\n");
    }
    // As informações extras (chave, vidas) agora ficam mais abaixo na tela
    printf("\nUse W A S D para mover, Q para sair. Pressione 'I' para interagir. Chave: %s | Vidas: %d\n",
           state->hasKey ? "SIM" : "NAO", state->lives);
}

// 'podeMover' continua funcionando da mesma forma
int podeMover(const GameState* state, int x, int y) {
    if (state->mapa[y][x] == '*' || state->mapa[y][x] == 'D') return 0;
    if (state->mapa[y][x] == '#') return 1;
    return 1;
}

// --- Lógica de Carregamento de Mapa (Apenas Fase 2) ---
void loadMapParte2(GameState* state) {
    state->hasKey = 0;
    state->dialogActive = 0;
    state->currentDialogueIndex = 0;
    state->currentMapType = 2; // Sempre Fase 2
    state->enemyOccupiedTile = '.';

    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            state->mapa[i][j] = '.';
        }
    }

    char borderChar = '#'; // Fase 2 sempre usa espinhos
    for (int i = 0; i < TAM; i++) {
        state->mapa[0][i] = borderChar;
        state->mapa[TAM - 1][i] = borderChar;
        state->mapa[i][0] = borderChar;
        state->mapa[i][TAM - 1] = borderChar;
    }

    state->playerX = 1; state->playerY = 1;
    
    // --- ALTERAÇÕES AQUI: Porta no centro e monstro perto ---
    int centerX = TAM / 2;
    int centerY = TAM / 2;

    state->mapa[centerY][centerX] = 'D'; // Porta no centro do mapa
    state->enemyX = centerX + 1; // Monstro à direita da porta
    state->enemyY = centerY;
    // --- FIM DAS ALTERAÇÕES ---

    // Novos obstáculos e caminhos para um mapa 30x30
    // Ajustei as posições para serem mais distribuídas no mapa maior
    
    // Barreiras e paredes
    for (int i = 5; i < 25; i++) state->mapa[i][7] = '#';
    for (int i = 5; i < 25; i++) state->mapa[i][22] = '#';
    for (int j = 5; j < 25; j++) state->mapa[7][j] = '#';
    for (int j = 5; j < 25; j++) state->mapa[22][j] = '#';

    // Aberturas nas barreiras
    state->mapa[10][7] = '.';
    state->mapa[15][7] = '.';
    state->mapa[20][7] = '.';
    state->mapa[10][22] = '.';
    state->mapa[15][22] = '.';
    state->mapa[20][22] = '.';
    state->mapa[7][10] = '.';
    state->mapa[7][15] = '.';
    state->mapa[7][20] = '.';
    state->mapa[22][10] = '.';
    state->mapa[22][15] = '.';
    state->mapa[22][20] = '.';

    // Mais alguns obstáculos espalhados
    state->mapa[3][3] = '*'; state->mapa[3][4] = '*'; state->mapa[3][5] = '*';
    state->mapa[4][3] = '*'; state->mapa[5][3] = '*';

    state->mapa[8][8] = '*'; state->mapa[8][9] = '*'; state->mapa[8][10] = '*';
    state->mapa[9][10] = '*'; state->mapa[10][10] = '*';

    state->mapa[4][25] = '*'; state->mapa[4][26] = '*'; // Perto do canto superior direito
    state->mapa[8][28] = '*'; state->mapa[8][27] = '*';

    state->mapa[25][5] = '*'; state->mapa[26][5] = '*'; // Perto do canto inferior esquerdo
    state->mapa[28][10] = '*'; state->mapa[28][11] = '*';

    // Chave no canto superior direito (não desaparece)
    state->mapa[1][TAM - 2] = '@'; 

    // Mais espinhos para o mapa maior
    for (int i = 1; i < TAM - 1; i += 3) {
        // Evita colocar espinhos onde a porta e o monstro estão
        if (!((i == centerY && (i + 5) % (TAM - 2) + 1 == centerX) || (i == centerY && (i + 10) % (TAM - 2) + 1 == centerX) ||
              ((i + 5) % (TAM - 2) + 1 == centerY && i == centerX) || ((i + 10) % (TAM - 2) + 1 == centerY && i == centerX) ||
              (i == centerY && (i + 5) % (TAM - 2) + 1 == centerX + 1) || (i == centerY && (i + 10) % (TAM - 2) + 1 == centerX + 1) ||
              ((i + 5) % (TAM - 2) + 1 == centerY && i == centerX + 1) || ((i + 10) % (TAM - 2) + 1 == centerY && i == centerX + 1))) {
            state->mapa[i][(i + 5) % (TAM - 2) + 1] = '#';
            state->mapa[i][(i + 10) % (TAM - 2) + 1] = '#';
            state->mapa[(i + 5) % (TAM - 2) + 1][i] = '#';
            state->mapa[(i + 10) % (TAM - 2) + 1][i] = '#';
        }
    }
}

// --- Lógica de Movimento do Inimigo (apenas Fase 2) ---
void moveEnemy(GameState* state) {
    if (state->enemyX != -1 && state->enemyY != -1) {
        state->mapa[state->enemyY][state->enemyX] = state->enemyOccupiedTile;
    }

    int dx[] = {0, 0, -1, 1};
    int dy[] = {-1, 1, 0, 0};

    int direcao = rand() % 4;
    int nx = state->enemyX + dx[direcao];
    int ny = state->enemyY + dy[direcao];

    // O monstro pode mover para qualquer lugar que não seja parede ('*') ou o jogador ('&')
    // Ele não deve se prender em espinhos ('#') ou portas ('D')
    if (nx > 0 && nx < TAM - 1 && ny > 0 && ny < TAM - 1 && state->mapa[ny][nx] != '*' && state->mapa[ny][nx] != '&') {
        // Se o vilão tenta se mover para a porta 'D', ele não deve conseguir,
        // a menos que o jogador já tenha interagido com ela e ela virou '='.
        // Se a porta for 'D', o monstro não pode passar
        if (state->mapa[ny][nx] == 'D') {
             // Tenta outra direção se a porta 'D' estiver bloqueando
             return; // Monstro não se move nesta rodada se a porta D estiver na frente
        }

        state->enemyOccupiedTile = state->mapa[ny][nx]; // Salva o que está no novo tile
        state->enemyX = nx;
        state->enemyY = ny;
        state->mapa[state->enemyY][state->enemyX] = 'X'; // Coloca o monstro no novo tile
    }
}

// --- Função de Jogo para Fase 2 ---
void play_parte2() {
    GameState state;
    state.lives = 3;

    loadMapParte2(&state); // Inicia na Fase 2

    char keyPress;

    while (1) {
        desenharMapa(&state);
        
        moverCursor(state.playerX, state.playerY);
        printf("&");

        // O vilão sempre desenha na sua posição, a menos que o jogador esteja nela
        if (state.playerX != state.enemyX || state.playerY != state.enemyY) {
            moverCursor(state.enemyX, state.enemyY);
            printf("X");
        }
        
        char emptyLine[TAM_FALA * 2 + 1];
        memset(emptyLine, ' ', sizeof(emptyLine) - 1);
        emptyLine[sizeof(emptyLine) - 1] = '\0';

        // Ajuste a posição para as mensagens, considerando o mapa maior
        moverCursor(0, TAM + 1); 
        printf("%s", emptyLine);

        keyPress = _getch();

        // Antes de mover o jogador, limpa a posição antiga dele
        moverCursor(state.playerX, state.playerY);
        // Se o jogador estava na mesma posição do inimigo, restaura o inimigo
        if (state.playerX == state.enemyX && state.playerY == state.enemyY) {
            printf("X "); // Desenha o inimigo na posição antiga
        } else {
            printf("%c ", state.mapa[state.playerY][state.playerX]); // Restaura o tile original
        }
        

        if (keyPress == 'q' || keyPress == 'Q') break;

        int newX = state.playerX, newY = state.playerY;
        if (keyPress == 'w') newY--;
        if (keyPress == 's') newY++;
        if (keyPress == 'a') newX--;
        if (keyPress == 'd') newX++;

        // Checa colisões antes de mover o jogador
        if (newX > 0 && newX < TAM - 1 && newY > 0 && newY < TAM - 1) {
            char targetTile = state.mapa[newY][newX];
            if (targetTile != '*' && targetTile != 'X') { // Jogador não pode andar em paredes ou no monstro
                state.playerX = newX;
                state.playerY = newY;
            }
        }

        // --- Interação com Itens (APÓS o movimento do jogador) ---
        // A interação deve ocorrer no tile onde o jogador *aterrissou*.
        if (state.mapa[state.playerY][state.playerX] == '#') {
            state.lives--;
            if (state.lives <= 0) {
                system("cls");
                printf("\n\nVoce tocou nos espinhos e morreu!\n");
                printf("Fim de jogo. Pressione qualquer tecla para voltar ao menu...\n");
                _getch();
                return;
            } else {
                moverCursor(0, TAM + 2); // Ajuste a posição da mensagem
                printf("Voce pisou nos espinhos e perdeu uma vida! Vidas restantes: %d", state.lives);
                Sleep(1500);
                state.playerX = 1; state.playerY = 1; // Reseta a posição do jogador
            }
        }

        // Lógica para interagir com a chave e a porta
        if (keyPress == 'i' || keyPress == 'I') {
            char currentItem = state.mapa[state.playerY][state.playerX];

            if (currentItem == '@') {
                state.hasKey = 1;
                // A chave da Fase 2 NÃO desaparece ao ser coletada
                // state.mapa[state.playerY][state.playerX] = '.'; // Comentado para não remover

                // Ao coletar a chave, a porta 'D' vira '='
                for (int i = 0; i < TAM; i++) {
                    for (int j = 0; j < TAM; j++) {
                        if (state.mapa[i][j] == 'D') {
                            state.mapa[i][j] = '='; // Abre a porta
                        }
                    }
                }
            } else if (currentItem == '=') {
                // Se a porta '=' está aberta, o jogador "escapa"
                system("cls");
                printf("\n\nVoce escapou da Fase 2!\n");
                printf("Pressione qualquer tecla para voltar ao menu...\n");
                _getch();
                return; // Sai da Fase 2 para o menu
            }
        }

        // Movimento do monstro
        moveEnemy(&state);

        // Colisão com monstro (checada após o movimento de ambos)
        if (state.playerX == state.enemyX && state.playerY == state.enemyY) {
            state.lives--;
            if (state.lives <= 0) {
                system("cls");
                printf("\n\nVoce foi pego pelo inimigo e morreu!\n");
                printf("Fim de jogo. Pressione qualquer tecla para voltar ao menu...\n");
                _getch();
                return;
            } else {
                moverCursor(0, TAM + 2); // Ajuste a posição da mensagem
                printf("Voce foi pego pelo inimigo e perdeu uma vida! Vidas restantes: %d", state.lives);
                Sleep(1500);
                loadMapParte2(&state); // Recarrega o mapa para resetar posições (incluindo monstro)
            }
        }
        
        Sleep(30);
    }

    system("cls");
}

// --- Função de Créditos ---
void credits() {
    system("cls");
    printf("\n=== Creditos ===\n");
    printf("Desenvolvedor: Seu Nome/Equipe\n");
    printf("Musica: Nenhuma\n");
    printf("Agradecimentos: A comunidade C\n");
    printf("\nPressione qualquer tecla para voltar ao menu...\n");
    _getch();
    system("cls");
}

// --- Função Principal (Menu) ---
int main() {
    setlocale(LC_ALL, "portuguese");
    srand(time(NULL));

    int choice;
    
    while (1) {
        printf("\n=== Dungeon Crawler - Parte 2 ===\n");
        printf("\n=== Menu Principal ===\n");
        printf("1. Jogar (Fase 2 - Mapa 30x30)\n"); // Atualiza texto do menu
        printf("2. Creditos\n");
        printf("3. Sair\n");
        printf("Escolha uma opcao: ");
        
        while (scanf("%d", &choice) != 1) { 
            printf("Entrada invalida! Por favor, digite um numero: ");
            while (getchar() != '\n');
        }
        while (getchar() != '\n');

        switch (choice) {
            case 1: play_parte2(); break;
            case 2: credits(); break;
            case 3: printf("Saindo do Jogo...\n"); return 0;
            default: printf("Opcao invalida!\n");
        }
    }
    return 0;
}
